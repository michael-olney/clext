                      CL_Images File Format (Partial)

                     Michael Olney <mpolney@gmail.com>

INTRODUCTION

This document describes the CL_Images format that comes with the Clan Lord
executable. It has been tested with version 575 of the CL_Images file, and may
not work with other versions.

On the highest level, the file format stores blobs of binary data which are
each labeled with a type and identifier. Together, the blob and its metadata
form an entry. The type and identifier of an entry together form a key that is
unique within the file. The metadata is stored in an array directly after the
file's initial header. The blobs follow the last entry.

The format and intention of the blobs is indicated by the entry types. The
three entry types that are described here contain colour mapping, pixel buffer
and an entry type that associates colour mappings with pixel buffers.

PRIMITIVE TYPES

+---------+--------+------------------------------------+
| Label   | Size   | Format                             |
+---------+--------+------------------------------------+
| BIT     | 1-bit  | unsigned                           |
| BITS<n> | n-bit  | unsigned, 1 <= n <= 32, big-endian |
| BYTE    | 8-bit  | unsigned, big-endian               |
| SHORT   | 16-bit | unsigned, big-endian               |
| LONG    | 32-bit | unsigned, big-endian               |
+---------+--------+------------------------------------+

LAYOUT

Each table contains a list of fields along with their types. The 'type' either
refers to a primitive type from table above, or to a format described by
another table. Just what the meaning of these fields are is determined by the
table type, given in parentheses following the table name.

sequential : Each field occurs sequential, in the order given.
union      : Exactly one of the field occurs, depending upon which selection
             condition is true.

Any type or table name may be suffixed with a C-like array notation that means
the obvious thing. Fields are refered to by use of the '.' operator, as in C.
Some of the fields are bit-stream encodings, and so no padding is present
unless otherwise specified. Tables may be parameterised by any value. Such
values will be contained with angle-brackets (Table_Name<arg>).

+--------------------------------------------------------+
| Overall File Format (sequential)                       |
+-------------------------------------+------------------+
| Type                                | Label            |
+-------------------------------------+------------------+
| FILE_HEADER                         | File_Header      |
| ENTRY_META[File_Header.Entry_Count] | Entry_Meta_Table |
| ENTRY_BLOB[File_Header.Entry_Count] | Entry_Blob_Table |
+-------------------------------------+------------------+

+--------------------------+
| FILE_HEADER (sequential) |
+--------------------------+
| Type  | Label            |
+-------+------------------+
| SHORT | Magic            | Note: Magic should be 0xFFFF.
| LONG  | Entry_Count      |
| LONG  | Unknown          |
| SHORT | Unknown          |
+-------+------------------+

+--------------------------+
| ENTRY_META (sequential)  |
+------+-------------------+
| Type | Label             |
| LONG | Data Offset       |
| LONG | Data Size (bytes) |
| LONG | Data_Type         | Note: No two entries should have the same
| LONG | Id                | Data_Type, Id pair.
+------+-------------------+

+----------------------------------------------+
| ENTRY_BLOB (union)                           |
+---------------+-------+----------------------+
| Type          | Label | Selection Condition  | WHERE ent is any ENTRY_META
+---------------+-------+----------------------+ value from the same file such
| BLOB_ASSOC    | Data  | ent.Data_Type='PDf5' | that ent.Data_Offset points
| BLOB_PIXELBUF | Data  | ent.Data_Type='Bit2' | to the beginning of this
| BLOB_COLORS   | Data  | ent.Data_Type='Clrs' | ENTRY_BLOB.
+---------------+-------+----------------------+

+-------------------------+
| BLOB_ASSOC (sequential) |
+-------+-----------------+
| Type  | Label           |
+-------+-----------------+
| LONG  | Unknown         |
| LONG  | Pixel_Buf_Id    | Note: Pixel_Buf_Id should be the id of an 
| LONG  | Colour_Map_Id   | ENTRY_META ent from the same file with
| LONG  | Unknown         | ent.Data_Type='Bit2'.
| LONG  | Unknown         |
| LONG  | Unknown         | NotE: Colour_Map_Id should be the id of an
| LONG  | Unknown         | ENTRY_META ent from the same file with
| LONG  | Unknown         | ent.Data_Type='Clrs'.
| SHORT | Unknown         |
| SHORT | Unknown         |
| SHORT | Unknown         |
+-------+-----------------+

+----------------------------------+
| BLOB_PIXELBUF (sequential)       |
+----------------+-----------------+
| Type           | Label           |
+----------------+-----------------+
| SHORT          | Rows            | The PIXEL_BLOCK array will be exactly
| SHORT          | Columns         | large enough to generate Rows*Columns
| LONG           | Unknown         | bytes, plus enough zero-bits to pad it
| BYTE           | Value_Width     | out to the nearest 8-bit boundary.
| BYTE           | Block_Len_Width |
| PIXEL_BLOCK[?] | Pixels          |
+----------------+-----------------+

+---------------------------+
| BLOB_COLOURS (sequential) |
+---------+-----------------+
| Type    | Label           |
+---------+-----------------+ Indexed into the palette (see below) to produce
| BYTE[n] | Palette_Indices | an RGB colour.
+---------+-----------------+

+------------------------------------+
| PIXEL_BLOCK (sequential)           |
+-----------------------+------------+
| Type                  | Label      |
+-----------------------+------------+
| BIT                   | Block_Type |
| PIXEL_RUN<Block_Type> | Block_Run  |
+-----------------------+------------+
^^ Pixel blocks decode into raw-major order byte values, padded as necessary.
   The decoded bytes are indices into the Palette_Indices field of a
   BLOB_COLOURS entry. The width and height are specified in the containing
   BLOB_PIXELBUF. A BLOB_COLOURS entry that can be used to expand the pixels
   out to RGB values should be associated with the containing BLOB_PIXELBUF
   by a BLOB_ASSOC entry.
+---------------------------------------------------+
| PIXEL_RUN<type> (union)                           |
+---------------------+-------+---------------------+
| Type                | Label | Selection Condition |
+---------------------+-------+---------------------+
| PIXEL_RUN_BLOCK     | Data  | type=0              |
| PIXEL_LITERAL_BLOCK | Data  | type=1              |
+---------------------+-------+---------------------+

+------------------------------------+
| PIXEL_RUN_BLOCK (sequential)       | The bytes for this block are produced
+-----------------------+------------+ by repeating Run_Value (padded to
| Type                  | Label      | 8 bits) Run_Length times.
+-----------------------+------------+
| BITS<Block_Len_Width> | Run_Length |
| BITS<Value_Width>     | Run_Value  |
+-----------------------+------------+

+------------------------------------------------------+
| PIXEL_LITERAL_BLOCK (sequential)                     | The bytes for this
+------------------------------------+-----------------+ block are produced
| Type                               | Label           | by copying each byte
+------------------------------------+-----------------+ in Literal_Bytes
| BITS<Block_Len_Width>              | Sequence_Length | (padded to 8 bits)
| BITS<Value_Width>[Sequence_Length] | Literal_Bytes   | into the output.
+------------------------------------+-----------------+

PALETTE

+-------+------+-------+------+
| Index | Red  | Green | Blue |
+-------+------+-------+------+
| 0x00  | 0xff | 0xff  | 0xff | 
| 0x01  | 0xff | 0xff  | 0xcc | 
| 0x02  | 0xff | 0xff  | 0x99 | 
| 0x03  | 0xff | 0xff  | 0x66 | 
| 0x04  | 0xff | 0xff  | 0x33 | 
| 0x05  | 0xff | 0xff  | 0x00 | 
| 0x06  | 0xff | 0xcc  | 0xff | 
| 0x07  | 0xff | 0xcc  | 0xcc | 
| 0x08  | 0xff | 0xcc  | 0x99 | 
| 0x09  | 0xff | 0xcc  | 0x66 | 
| 0x0a  | 0xff | 0xcc  | 0x33 | 
| 0x0b  | 0xff | 0xcc  | 0x00 | 
| 0x0c  | 0xff | 0x99  | 0xff | 
| 0x0d  | 0xff | 0x99  | 0xcc | 
| 0x0e  | 0xff | 0x99  | 0x99 | 
| 0x0f  | 0xff | 0x99  | 0x66 | 
| 0x10  | 0xff | 0x99  | 0x33 | 
| 0x11  | 0xff | 0x99  | 0x00 | 
| 0x12  | 0xff | 0x66  | 0xff | 
| 0x13  | 0xff | 0x66  | 0xcc | 
| 0x14  | 0xff | 0x66  | 0x99 | 
| 0x15  | 0xff | 0x66  | 0x66 | 
| 0x16  | 0xff | 0x66  | 0x33 | 
| 0x17  | 0xff | 0x66  | 0x00 | 
| 0x18  | 0xff | 0x33  | 0xff | 
| 0x19  | 0xff | 0x33  | 0xcc | 
| 0x1a  | 0xff | 0x33  | 0x99 | 
| 0x1b  | 0xff | 0x33  | 0x66 | 
| 0x1c  | 0xff | 0x33  | 0x33 | 
| 0x1d  | 0xff | 0x33  | 0x00 | 
| 0x1e  | 0xff | 0x00  | 0xff | 
| 0x1f  | 0xff | 0x00  | 0xcc | 
| 0x20  | 0xff | 0x00  | 0x99 | 
| 0x21  | 0xff | 0x00  | 0x66 | 
| 0x22  | 0xff | 0x00  | 0x33 | 
| 0x23  | 0xff | 0x00  | 0x00 | 
| 0x24  | 0xcc | 0xff  | 0xff | 
| 0x25  | 0xcc | 0xff  | 0xcc | 
| 0x26  | 0xcc | 0xff  | 0x99 | 
| 0x27  | 0xcc | 0xff  | 0x66 | 
| 0x28  | 0xcc | 0xff  | 0x33 | 
| 0x29  | 0xcc | 0xff  | 0x00 | 
| 0x2a  | 0xcc | 0xcc  | 0xff | 
| 0x2b  | 0xcc | 0xcc  | 0xcc | 
| 0x2c  | 0xcc | 0xcc  | 0x99 | 
| 0x2d  | 0xcc | 0xcc  | 0x66 | 
| 0x2e  | 0xcc | 0xcc  | 0x33 | 
| 0x2f  | 0xcc | 0xcc  | 0x00 | 
| 0x30  | 0xcc | 0x99  | 0xff | 
| 0x31  | 0xcc | 0x99  | 0xcc | 
| 0x32  | 0xcc | 0x99  | 0x99 | 
| 0x33  | 0xcc | 0x99  | 0x66 | 
| 0x34  | 0xcc | 0x99  | 0x33 | 
| 0x35  | 0xcc | 0x99  | 0x00 | 
| 0x36  | 0xcc | 0x66  | 0xff | 
| 0x37  | 0xcc | 0x66  | 0xcc | 
| 0x38  | 0xcc | 0x66  | 0x99 | 
| 0x39  | 0xcc | 0x66  | 0x66 | 
| 0x3a  | 0xcc | 0x66  | 0x33 | 
| 0x3b  | 0xcc | 0x66  | 0x00 | 
| 0x3c  | 0xcc | 0x33  | 0xff | 
| 0x3d  | 0xcc | 0x33  | 0xcc | 
| 0x3e  | 0xcc | 0x33  | 0x99 | 
| 0x3f  | 0xcc | 0x33  | 0x66 | 
| 0x40  | 0xcc | 0x33  | 0x33 | 
| 0x41  | 0xcc | 0x33  | 0x00 | 
| 0x42  | 0xcc | 0x00  | 0xff | 
| 0x43  | 0xcc | 0x00  | 0xcc | 
| 0x44  | 0xcc | 0x00  | 0x99 | 
| 0x45  | 0xcc | 0x00  | 0x66 | 
| 0x46  | 0xcc | 0x00  | 0x33 | 
| 0x47  | 0xcc | 0x00  | 0x00 | 
| 0x48  | 0x99 | 0xff  | 0xff | 
| 0x49  | 0x99 | 0xff  | 0xcc | 
| 0x4a  | 0x99 | 0xff  | 0x99 | 
| 0x4b  | 0x99 | 0xff  | 0x66 | 
| 0x4c  | 0x99 | 0xff  | 0x33 | 
| 0x4d  | 0x99 | 0xff  | 0x00 | 
| 0x4e  | 0x99 | 0xcc  | 0xff | 
| 0x4f  | 0x99 | 0xcc  | 0xcc | 
| 0x50  | 0x99 | 0xcc  | 0x99 | 
| 0x51  | 0x99 | 0xcc  | 0x66 | 
| 0x52  | 0x99 | 0xcc  | 0x33 | 
| 0x53  | 0x99 | 0xcc  | 0x00 | 
| 0x54  | 0x99 | 0x99  | 0xff | 
| 0x55  | 0x99 | 0x99  | 0xcc | 
| 0x56  | 0x99 | 0x99  | 0x99 | 
| 0x57  | 0x99 | 0x99  | 0x66 | 
| 0x58  | 0x99 | 0x99  | 0x33 | 
| 0x59  | 0x99 | 0x99  | 0x00 | 
| 0x5a  | 0x99 | 0x66  | 0xff | 
| 0x5b  | 0x99 | 0x66  | 0xcc | 
| 0x5c  | 0x99 | 0x66  | 0x99 | 
| 0x5d  | 0x99 | 0x66  | 0x66 | 
| 0x5e  | 0x99 | 0x66  | 0x33 | 
| 0x5f  | 0x99 | 0x66  | 0x00 | 
| 0x60  | 0x99 | 0x33  | 0xff | 
| 0x61  | 0x99 | 0x33  | 0xcc | 
| 0x62  | 0x99 | 0x33  | 0x99 | 
| 0x63  | 0x99 | 0x33  | 0x66 | 
| 0x64  | 0x99 | 0x33  | 0x33 | 
| 0x65  | 0x99 | 0x33  | 0x00 | 
| 0x66  | 0x99 | 0x00  | 0xff | 
| 0x67  | 0x99 | 0x00  | 0xcc | 
| 0x68  | 0x99 | 0x00  | 0x99 | 
| 0x69  | 0x99 | 0x00  | 0x66 | 
| 0x6a  | 0x99 | 0x00  | 0x33 | 
| 0x6b  | 0x99 | 0x00  | 0x00 | 
| 0x6c  | 0x66 | 0xff  | 0xff | 
| 0x6d  | 0x66 | 0xff  | 0xcc | 
| 0x6e  | 0x66 | 0xff  | 0x99 | 
| 0x6f  | 0x66 | 0xff  | 0x66 | 
| 0x70  | 0x66 | 0xff  | 0x33 | 
| 0x71  | 0x66 | 0xff  | 0x00 | 
| 0x72  | 0x66 | 0xcc  | 0xff | 
| 0x73  | 0x66 | 0xcc  | 0xcc | 
| 0x74  | 0x66 | 0xcc  | 0x99 | 
| 0x75  | 0x66 | 0xcc  | 0x66 | 
| 0x76  | 0x66 | 0xcc  | 0x33 | 
| 0x77  | 0x66 | 0xcc  | 0x00 | 
| 0x78  | 0x66 | 0x99  | 0xff | 
| 0x79  | 0x66 | 0x99  | 0xcc | 
| 0x7a  | 0x66 | 0x99  | 0x99 | 
| 0x7b  | 0x66 | 0x99  | 0x66 | 
| 0x7c  | 0x66 | 0x99  | 0x33 | 
| 0x7d  | 0x66 | 0x99  | 0x00 | 
| 0x7e  | 0x66 | 0x66  | 0xff | 
| 0x7f  | 0x66 | 0x66  | 0xcc | 
| 0x80  | 0x66 | 0x66  | 0x99 | 
| 0x81  | 0x66 | 0x66  | 0x66 | 
| 0x82  | 0x66 | 0x66  | 0x33 | 
| 0x83  | 0x66 | 0x66  | 0x00 | 
| 0x84  | 0x66 | 0x33  | 0xff | 
| 0x85  | 0x66 | 0x33  | 0xcc | 
| 0x86  | 0x66 | 0x33  | 0x99 | 
| 0x87  | 0x66 | 0x33  | 0x66 | 
| 0x88  | 0x66 | 0x33  | 0x33 | 
| 0x89  | 0x66 | 0x33  | 0x00 | 
| 0x8a  | 0x66 | 0x00  | 0xff | 
| 0x8b  | 0x66 | 0x00  | 0xcc | 
| 0x8c  | 0x66 | 0x00  | 0x99 | 
| 0x8d  | 0x66 | 0x00  | 0x66 | 
| 0x8e  | 0x66 | 0x00  | 0x33 | 
| 0x8f  | 0x66 | 0x00  | 0x00 | 
| 0x90  | 0x33 | 0xff  | 0xff | 
| 0x91  | 0x33 | 0xff  | 0xcc | 
| 0x92  | 0x33 | 0xff  | 0x99 | 
| 0x93  | 0x33 | 0xff  | 0x66 | 
| 0x94  | 0x33 | 0xff  | 0x33 | 
| 0x95  | 0x33 | 0xff  | 0x00 | 
| 0x96  | 0x33 | 0xcc  | 0xff | 
| 0x97  | 0x33 | 0xcc  | 0xcc | 
| 0x98  | 0x33 | 0xcc  | 0x99 | 
| 0x99  | 0x33 | 0xcc  | 0x66 | 
| 0x9a  | 0x33 | 0xcc  | 0x33 | 
| 0x9b  | 0x33 | 0xcc  | 0x00 | 
| 0x9c  | 0x33 | 0x99  | 0xff | 
| 0x9d  | 0x33 | 0x99  | 0xcc | 
| 0x9e  | 0x33 | 0x99  | 0x99 | 
| 0x9f  | 0x33 | 0x99  | 0x66 | 
| 0xa0  | 0x33 | 0x99  | 0x33 | 
| 0xa1  | 0x33 | 0x99  | 0x00 | 
| 0xa2  | 0x33 | 0x66  | 0xff | 
| 0xa3  | 0x33 | 0x66  | 0xcc | 
| 0xa4  | 0x33 | 0x66  | 0x99 | 
| 0xa5  | 0x33 | 0x66  | 0x66 | 
| 0xa6  | 0x33 | 0x66  | 0x33 | 
| 0xa7  | 0x33 | 0x66  | 0x00 | 
| 0xa8  | 0x33 | 0x33  | 0xff | 
| 0xa9  | 0x33 | 0x33  | 0xcc | 
| 0xaa  | 0x33 | 0x33  | 0x99 | 
| 0xab  | 0x33 | 0x33  | 0x66 | 
| 0xac  | 0x33 | 0x33  | 0x33 | 
| 0xad  | 0x33 | 0x33  | 0x00 | 
| 0xae  | 0x33 | 0x00  | 0xff | 
| 0xaf  | 0x33 | 0x00  | 0xcc | 
| 0xb0  | 0x33 | 0x00  | 0x99 | 
| 0xb1  | 0x33 | 0x00  | 0x66 | 
| 0xb2  | 0x33 | 0x00  | 0x33 | 
| 0xb3  | 0x33 | 0x00  | 0x00 | 
| 0xb4  | 0x00 | 0xff  | 0xff | 
| 0xb5  | 0x00 | 0xff  | 0xcc | 
| 0xb6  | 0x00 | 0xff  | 0x99 | 
| 0xb7  | 0x00 | 0xff  | 0x66 | 
| 0xb8  | 0x00 | 0xff  | 0x33 | 
| 0xb9  | 0x00 | 0xff  | 0x00 | 
| 0xba  | 0x00 | 0xcc  | 0xff | 
| 0xbb  | 0x00 | 0xcc  | 0xcc | 
| 0xbc  | 0x00 | 0xcc  | 0x99 | 
| 0xbd  | 0x00 | 0xcc  | 0x66 | 
| 0xbe  | 0x00 | 0xcc  | 0x33 | 
| 0xbf  | 0x00 | 0xcc  | 0x00 | 
| 0xc0  | 0x00 | 0x99  | 0xff | 
| 0xc1  | 0x00 | 0x99  | 0xcc | 
| 0xc2  | 0x00 | 0x99  | 0x99 | 
| 0xc3  | 0x00 | 0x99  | 0x66 | 
| 0xc4  | 0x00 | 0x99  | 0x33 | 
| 0xc5  | 0x00 | 0x99  | 0x00 | 
| 0xc6  | 0x00 | 0x66  | 0xff | 
| 0xc7  | 0x00 | 0x66  | 0xcc | 
| 0xc8  | 0x00 | 0x66  | 0x99 | 
| 0xc9  | 0x00 | 0x66  | 0x66 | 
| 0xca  | 0x00 | 0x66  | 0x33 | 
| 0xcb  | 0x00 | 0x66  | 0x00 | 
| 0xcc  | 0x00 | 0x33  | 0xff | 
| 0xcd  | 0x00 | 0x33  | 0xcc | 
| 0xce  | 0x00 | 0x33  | 0x99 | 
| 0xcf  | 0x00 | 0x33  | 0x66 | 
| 0xd0  | 0x00 | 0x33  | 0x33 | 
| 0xd1  | 0x00 | 0x33  | 0x00 | 
| 0xd2  | 0x00 | 0x00  | 0xff | 
| 0xd3  | 0x00 | 0x00  | 0xcc | 
| 0xd4  | 0x00 | 0x00  | 0x99 | 
| 0xd5  | 0x00 | 0x00  | 0x66 | 
| 0xd6  | 0x00 | 0x00  | 0x33 | 
| 0xd7  | 0x00 | 0x00  | 0x00 | 
| 0xd8  | 0xee | 0x00  | 0x00 | 
| 0xd9  | 0xdd | 0x00  | 0x00 | 
| 0xda  | 0xbb | 0x00  | 0x00 | 
| 0xdb  | 0xaa | 0x00  | 0x00 | 
| 0xdc  | 0x88 | 0x00  | 0x00 | 
| 0xdd  | 0x77 | 0x00  | 0x00 | 
| 0xde  | 0x55 | 0x00  | 0x00 | 
| 0xdf  | 0x44 | 0x00  | 0x00 | 
| 0xe0  | 0x22 | 0x00  | 0x00 | 
| 0xe1  | 0x11 | 0x00  | 0x00 | 
| 0xe2  | 0x00 | 0xee  | 0x00 | 
| 0xe3  | 0x00 | 0xdd  | 0x00 | 
| 0xe4  | 0x00 | 0xbb  | 0x00 | 
| 0xe5  | 0x00 | 0xaa  | 0x00 | 
| 0xe6  | 0x00 | 0x88  | 0x00 | 
| 0xe7  | 0x00 | 0x77  | 0x00 | 
| 0xe8  | 0x00 | 0x55  | 0x00 | 
| 0xe9  | 0x00 | 0x44  | 0x00 | 
| 0xea  | 0x00 | 0x22  | 0x00 | 
| 0xeb  | 0x00 | 0x11  | 0x00 | 
| 0xec  | 0x00 | 0x00  | 0xee | 
| 0xed  | 0x00 | 0x00  | 0xdd | 
| 0xee  | 0x00 | 0x00  | 0xbb | 
| 0xef  | 0x00 | 0x00  | 0xaa | 
| 0xf0  | 0x00 | 0x00  | 0x88 | 
| 0xf1  | 0x00 | 0x00  | 0x77 | 
| 0xf2  | 0x00 | 0x00  | 0x55 | 
| 0xf3  | 0x00 | 0x00  | 0x44 | 
| 0xf4  | 0x00 | 0x00  | 0x22 | 
| 0xf5  | 0xff | 0xff  | 0xff | 
| 0xf6  | 0xee | 0xee  | 0xee | 
| 0xf7  | 0xdd | 0xdd  | 0xdd | 
| 0xf8  | 0xbb | 0xbb  | 0xbb | 
| 0xf9  | 0xaa | 0xaa  | 0xaa | 
| 0xfa  | 0x88 | 0x88  | 0x88 | 
| 0xfb  | 0x77 | 0x77  | 0x77 | 
| 0xfc  | 0x55 | 0x55  | 0x55 | 
| 0xfd  | 0x44 | 0x44  | 0x44 | 
| 0xfe  | 0x22 | 0x22  | 0x22 |
| 0xff  | 0x11 | 0x11  | 0x11 |
+-------+------+-------+------+
